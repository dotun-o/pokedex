{"version":3,"sources":["components/Header.js","components/Search.js","components/Tile.js","components/TileGrid.js","components/Modal.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","title","subtitle","Component","Search","type","placeholder","onKeyUp","e","filterHandler","target","value","trim","toLowerCase","onClick","closeHandler","Tile","src","icon","alt","name","TileGrid","data","filter","pokemon","searchTerm","match","map","key","id","clickHandler","img","Modal","visible","join","height","weight","weaknesses","Footer","App","setSearchTerm","term","setState","showModal","modalVisible","modalData","hideModal","state","window","onkeyup","keyCode","Boolean","location","hostname","ReactDOM","render","Data","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7433592.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Header.css\";\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                 <h1>{this.props.title}</h1>\r\n                 <h2>{this.props.subtitle}</h2>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Search.css\";\r\n\r\nexport default class Search extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"search-bar\">\r\n                <input type=\"text\" placeholder=\"Search for a Pokemon...\" onKeyUp={e => this.props.filterHandler(e.target.value.trim().toLowerCase())} />\r\n                <button onClick={e => this.props.closeHandler()}>×</button>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Tile.css\";\r\n\r\nexport default class Tile extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"tile\">\r\n                <img src={this.props.icon} alt={\"Image: \" + this.props.name} />\r\n                <h4>{this.props.name}</h4>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport \"./TileGrid.css\";\r\n\r\nexport default class TileGrid extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"tile-grid\">\r\n                {this.props.data.filter(pokemon => {\r\n                    if(this.props.searchTerm === \"\") {\r\n                        return true;\r\n                    }\r\n\r\n                    if(pokemon.name.toLowerCase().match(this.props.searchTerm)) {\r\n                        return true;\r\n                    }\r\n                })\r\n                .map(pokemon => {\r\n                    return (\r\n                        <li key={pokemon.id} onClick={e => this.props.clickHandler(e, pokemon)}>\r\n                            <Tile name={pokemon.name} icon={pokemon.img} />\r\n                        </li>\r\n                    )}\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport \"./Modal.css\";\r\n\r\nexport default class Modal extends Component {\r\n    render() {\r\n        return (\r\n            <div className={this.props.visible ? \"modal visible\" : \"modal\"}>\r\n                <div className=\"modal-overlay\" onClick={this.props.closeHandler}></div>\r\n                <div className=\"modal-dialog\">\r\n                    {\r\n                        this.props.data.name &&\r\n                        <>\r\n                        <div className=\"modal-header\">\r\n                            <h3>{this.props.data.name}</h3>\r\n                            <button className=\"modal-close\" onClick={this.props.closeHandler}>×</button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <img src={this.props.data.img} alt={this.props.data.name} />\r\n\r\n                            <hr />\r\n\r\n                            <h4>Type</h4>\r\n                            <p>{this.props.data.type.join(\", \")}</p>\r\n\r\n                            <hr />\r\n\r\n                            <h4>Height</h4>\r\n                            <p>{this.props.data.height}</p>\r\n\r\n                            <hr />\r\n\r\n                            <h4>Weight</h4>\r\n                            <p>{this.props.data.weight}</p>\r\n\r\n                            <hr />\r\n\r\n                            <h4>Weaknesses</h4>\r\n                            <p>{this.props.data.weaknesses.join(\", \")}</p>\r\n                        </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Footer.css\";\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <p>All Pokémon content are &copy; Nintendo, Game Freak, and The Pokémon Company.</p>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\nimport TileGrid from \"./components/TileGrid\";\nimport Modal from \"./components/Modal\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchTerm: \"\",\n            modalVisible: false,\n            modalData: {},\n        }\n\n        window.onkeyup = (e) => e.keyCode === 27 && this.state.modalVisible && this.hideModal();\n    }\n\n    setSearchTerm = (term) => {\n        this.setState({searchTerm: term});\n    }\n\n    showModal = (e, data) => {\n        this.setState({\n            modalVisible: true,\n            modalData: data,\n        });\n    }\n\n    hideModal = (e) => {\n        this.setState({\n            modalVisible: false,\n            modalData: {},\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n               <Header title={this.props.title} subtitle={this.props.subtitle} />\n                <Search filterHandler={this.setSearchTerm} closeHandler={this.hideModal} />\n                <TileGrid data={this.props.data} clickHandler={this.showModal} searchTerm={this.state.searchTerm} />\n                <Modal data={this.state.modalData} visible={this.state.modalVisible} closeHandler={this.hideModal} />\n                <Footer />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as Data from \"./data/pokedex\";\n\nReactDOM.render(<App data={Data.pokemon} title=\"Pokedex\" subtitle=\"by Dotun\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}